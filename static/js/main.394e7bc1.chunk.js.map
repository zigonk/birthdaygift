{"version":3,"sources":["images/pic1.jpg","images/pic2.jpg","images/pic3.jpg","images/pic4.jpg","images/pic5.jpg","images/pic6.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","slides","react_default","a","createElement","src","pic1","alt","pic2","pic3","pic4","height","pic5","pic6","SplashScreen","className","React","Component","CarouselScreen","dist","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","renderSplashScreen","_this2","setTimeout","setState","App_SplashScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mVCUpCC,EAAS,CACXC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,IAAI,MACpBL,EAAAC,EAAAC,cAAA,OAAKC,IAAKG,IAAMD,IAAI,MACpBL,EAAAC,EAAAC,cAAA,OAAKC,IAAKI,IAAMF,IAAI,MACpBL,EAAAC,EAAAC,cAAA,OAAKC,IAAKK,IAAMH,IAAI,IAAII,OAAQ,MAChCT,EAAAC,EAAAC,cAAA,OAAKC,IAAKO,IAAML,IAAI,IAAII,OAAQ,MAChCT,EAAAC,EAAAC,cAAA,OAAKC,IAAKQ,IAAMN,IAAI,OAGhBO,mLAQF,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,gNAXmBY,IAAMC,WAmBjC,SAASC,IACP,OACEhB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,YAAf,qEACAb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUlB,OAAQA,UA0BXmB,cAnBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,oBAAoB,GAHLR,mFAMC,IAAAS,EAAAN,KAClBO,WAAW,WACTD,EAAKE,SAAS,CAACH,oBAAoB,KAClC,sCAGH,OAAIL,KAAKI,MAAMC,mBACN5B,EAAAC,EAAAC,cAAC8B,EAAD,MAEGhC,EAAAC,EAAAC,cAACc,EAAD,aAhBEF,IAAMC,WCrCJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.394e7bc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic1.6041fec9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic2.41793d01.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic3.749c3f6b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic4.93bf4258.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic5.641460bd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic6.c72b4794.jpg\";","import React from 'react';\nimport { Carousel } from '3d-react-carousal'\nimport './App.css'\nimport pic1 from './images/pic1.jpg'\nimport pic2 from './images/pic2.jpg'\nimport pic3 from './images/pic3.jpg'\nimport pic4 from './images/pic4.jpg'\nimport pic5 from './images/pic5.jpg'\nimport pic6 from './images/pic6.jpg'\n\nlet slides = [\n  <img src={pic1} alt=\"1\" />,\n  <img src={pic2} alt=\"2\" />,\n  <img src={pic3} alt=\"3\" />,\n  <img src={pic4} alt=\"4\" height={500}/>,\n  <img src={pic5} alt=\"5\" height={500}/>,\n  <img src={pic6} alt=\"6\" />\n]\n\nclass SplashScreen extends React.Component {\n  render() {\n    const style = {top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      position: 'fixed'};\n\n    return (\n      <div className='App'>\n        <h1>Chúc mừng sinh nhật Mèo con!!!!</h1>\n        <p>\n          Gửi cậu chút kỉ niệm nhỏ của tụi mình ở Hà Nội - những cảm xúc có lẽ khó tìm lại được.\n        </p>\n      </div>\n    );\n  }\n}\n\nfunction CarouselScreen() {\n  return (\n    <div className='App'>\n      <div className=\"Question\">Chẳng biết cậu còn nhớ không nhỉ ?</div>\n      <div>\n        <Carousel slides={slides}/>\n      </div>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      renderSplashScreen: true\n    }\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({renderSplashScreen: false})\n    }, 3000)\n  }\n  render() {\n    if (this.state.renderSplashScreen) {\n      return <SplashScreen/>\n    }\n    else return <CarouselScreen/>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}